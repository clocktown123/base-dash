import pygame
import random
from platforms import Platform

pygame.init()
screen = pygame.display.set_mode((800,800))
pygame.display.set_caption("Base dash")
clock = pygame.time.Clock() # controls frame rates

platforms = []

#Color variables
WHITE = (255,255,255)
BLUE = (0,0,255)

#Player variables
pw, ph = 10, 20
px, py = 50, 50
vx, vy = 5, 0
g = 0.5
jmp = -10
double_jmp = -15
jumping = False
double_jumping = False
Jump_pressed = False

#jump = False
Djump = False

NJumps = 2
isOnGround = True

#CONSTANTS 
A=0
D=1
W = 2
S = 3

keys = [False, False, False, False] #this list holds whether each key has been pressed


while True: #GAME LOOP ###############################################################
    clock.tick(60)
    
    #even handling-------------------------------------
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            
    keys = pygame.key.get_pressed()
    
    #Physics section--------------------------------------------------
    
    #Player input
    if keys[pygame.K_a]:
        px -= vx
    
    if keys[pygame.K_d]:
        px += vx
        
    
    if keys[pygame.K_w]:
        if not Jump_pressed:
            if not jumping:
                vy = jmp
                jumping = True
            elif not double_jumping:
                vy = double_jmp
                double_jumping = True
            Jump_pressed = True
    else:
        Jump_pressed = False
        

    #apply gravity
    vy += g
    py += vy
    
    #check if player is on the ground
    if py >= 600 - ph:
        py = 600 - ph
        jumping = False
        double_jumping = False
        vy = 0
        NJumps = 2
        isOnGround = True
    
    # platform physics------------------------------------------------------
    if random.randint(1, 100) <= 10: #40& chance to create a new platform
        platforms.append(Platform())
        print("appending platforms")
    
    #remove platforms that moved off the screen
    for platform in platforms:
        if platform.x + platform.width < 10: # check if the platform is off the screen
            platforms.remove(platform) # fun fact if this was C++ we'd
    
    for platform in platforms:
        platform.update()

    
    # render section--------------------------------------------------------
    screen.fill(WHITE)
    
    pygame.draw.rect(screen, BLUE, (px, py, pw, ph))
    
    for platform in platforms:
        platform.draw(screen)
    
    pygame.display.flip()
    
                
           
    
