import pygame
import random
from pygame import mixer
from platforms import Platform
from BaseBall import Ball

pygame.init()
screen = pygame.display.set_mode((800,800))
pygame.display.set_caption("Base dash")
clock = pygame.time.Clock() # controls frame rates

mixer.init()
Bonk = pygame.mixer.Sound("Bonk.mp3")
HitSE = pygame.mixer.Sound("Hit.mp3")

platforms = []
balls = []

#Color variables
WHITE = (255,255,255)
BLUE = (0,0,255)
RED = (255, 0, 0)

#Player variables
pw, ph = 10, 20
px, py = 50, 50
vx, vy = 5, 0
g = 0.5
jmp = -10
double_jmp = -15
jumping = False
double_jumping = False
Jump_pressed = False

Guy = pygame.image.load('ArrowGuy.png') #load your spritesheet
Guy.set_colorkey((255, 0, 255)) #this makes bright pink (255, 0, 255) transparent (sort of)

frameWidth = 50
frameHeight = 50
RowNum = 0 #for left animation, this will need to change for other animations
frameNum = 1
ticker = 0
#direction = D

#jump = False
Djump = False

NJumps = 2
isOnGround = True

#CONSTANTS 
A=0
D=1
W = 2
S = 3

keys = [False, False, False, False] #this list holds whether each key has been pressed


#Platform Collision Function--------------------------
def plat_collision(px, py, pw, ph, platform):
    return(
        px < platform.x+platform.width and
        px + pw > platform.x and
        py + ph  > platform.y and py < platform.y + platform.height
    )

HP = 100
isHurt = False

Hit = False

point = 0

while True and HP > 0: #GAME LOOP ###############################################################
    clock.tick(60)
    ticker+=1
    
    #even handling-------------------------------------
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            
    keys = pygame.key.get_pressed()
    
    #Physics section--------------------------------------------------
    
    #Player input
    if keys[pygame.K_a]:
        px -= vx
        RowNum = 0
    
    if keys[pygame.K_d]:
        px += vx
        RowNum = 2
    
    if keys[pygame.K_SPACE]:
        Hit = True
    else:
        Hit = False
    print (Hit)        

    if keys[pygame.K_w]:
        RowNum = 1
        if not Jump_pressed:
            if not jumping:
                vy = jmp
                jumping = True
            elif not double_jumping:
                vy = double_jmp
                double_jumping = True
            Jump_pressed = True
    else:
        Jump_pressed = False
        

    #apply gravity
    vy += g
    py += vy
    
    #platform collision
    for platform in platforms:
        if plat_collision(px, py, pw, ph, platform):
            if vy > 0 and py + ph <= platform.y + vy:
                py = platform.y-ph
                vy = 0
                jumping = False
                double_jumping = False
                isOnGround = True
                break
    
    #ball collision
    for ball in balls:
        if ball.x-7 < px+10 and ball.x+7 > px and ball.y+7 > py and ball.y-7 < py+20 and Hit == False :
            HP -= 10
            pygame.mixer.Sound.play(HitSE)
        elif ball.x-7 < px+10 and ball.x+7 > px and ball.y+7 > py and ball.y-7 < py+20 and Hit == True :
            ball.speed = -3
            point += 1
            pygame.mixer.Sound.play(Bonk)
            
            
        
    if vx<0 or vx>0 or vy <0 or vy>0: #left animation
        # Ticker is a spedometer. We don't want Chicken animating as fast as the
        # processor can process! Update Animation Frame each time ticker goes over
        ticker+=1
        
    if ticker%10==0: #only change frames every 10 ticks
        frameNum+=1
           #If we are over the number of frames in our sprite, reset to 0.
           #In this particular case, there are 8 frames (0 through 7)
    if frameNum>7: 
        frameNum = 0
        
    
    #print(HP)
    #check if player is on the ground
    if py >= 600 - ph:
        py = 600 - ph
        jumping = False
        double_jumping = False
        vy = 0
        NJumps = 2
        isOnGround = True
    
    # platform physics------------------------------------------------------
    if random.randint(1, 100) <= 5: #5% chance to create a new platform every tick
        platforms.append(Platform())
        #print("appending platforms")
        
    if random.randint(1, 100) <= 5:
        balls.append(Ball())
        #print("appending balls")
    
    #remove platforms that moved off the screen
    for platform in platforms:
        if platform.x + platform.width < 10: # check if the platform is off the screen
            platforms.remove(platform) # fun fact if this was C++ we'd
    
    for platform in platforms:
        platform.update()

    for ball in balls:
        ball.update()
    # render section--------------------------------------------------------
    screen.fill(WHITE)
    
    for ball in balls:
        ball.draw(screen)
    
    if isHurt == False:
        #pygame.draw.rect(screen, BLUE, (px, py, pw, ph))
        screen.blit(Guy, (px-30, py-30), (frameWidth*frameNum, RowNum*frameHeight, frameWidth, frameHeight))
    else:
        pygame.draw.rect(screen, RED, (px, py, pw, ph))
    
    for platform in platforms:
        platform.draw(screen)
        
    font = pygame.font.Font(None, 74)
    text = font.render(str(point), 1, (0, 0, 0))
    text2 = font.render(str("HP:"), 1, (0,0,0))
    text3 = font.render(str(HP), 1, (0, 0, 0))
    text4 = font.render(str("Score:"), 1, (0,0,0))
    screen.blit(text, (185,10))
    screen.blit(text2, (600,10))
    screen.blit(text3, (700, 10))
    screen.blit(text4, (20,10))

    pygame.display.flip()
